参见:

    http://chenfeng0104.iteye.com/blog/609075

. groovy 中的哈希表非常强大与方便

. 1. 输出哈希表

  def retmap = [:]

  ... // 哈希表赋值

  println retmap.toString()

. 2. map 转换成 list

  def test = ReportKeysTbl.list()
        
  def indexList = []
  test.each { rep ->
            indexList.add(rep?.reportkeys)
  }
        
  println indexList

. 3. 关于 哈希表数组

  采用 List 与 Map 结合使用的方式， 来实现这种类似需求的功能

        def list1 = []
        def map1=[:]
        for ( int i = 0; i < 3; i ++ ) {
            map1 = ["1":"hello","2":"d8","code":283]
            list1.add(map1)
            map1 = ["1":"adams","2":"hello","code":87]
            list1.add(map1)
        }
        //def map1 = ["1":"hello","2":"d8","code":283]
        println list1
        println list1[0]["1"]
        println list1[1]["code"]

. 4. 遍历 map

          def ret = [:]

          params.each { item ->
           
            ret[item.key] = item.value
        }

   如果需要处理哈希表中的个别key或value , 可以在循环中对item 进行判断处理.

. 5. 判断哈希表中是否有给定的键值key， 或给定的value 值

    if ( map[key] )

         println 目标键值的项存在

    
. 6. 获取哈希表 中的子哈希表

    	def mapxxx=["a":"a", "b":"b", "c":"a"]
        def submap = mapxxx.findAll{
            it.value == mapxxx.a
        }
        println mapxxx.size()
        println submap
        if ( mapxxx.findAll{it.value==mapxxx.a}.size() > 1 )
            println "不行， 循环处理了"
        if ( submap.size() > 1 )
            println "不行， 循环处理了"

. 7. 关于 哈希表的键值

     一般都用字符串, 这样的话 可以 map.key 方式来访问value . 直接用数字作为键值也可以， 不过访问的时候就要小心， 比如:

      def map1 = [2:"ab", "second":"cd"]
      
      println map1[2] 			// 这样就可以访问第一个元素
      println map["2"] 			// 访问结果为null, 没有访问到，因为键值2是数字,不是字符串
      println map.2			// 格式出错， 不能用这种方法访问键值为数字的item

      println map.second		// 正确
      println map["second"]		// 正确
      println map[second]		// 出异常, 没有定义sencod 变量, 如果定义了， 更加麻烦， 查找这个错误更难

      所以, 对于哈希表的键值定义一定要统一格式, 全部用字符串类型. 访问全部用map["second"]格式。这样能大幅提高可读性.

. 8. 清空指定的哈希表

    def emptyHMap( m ) {
        return m.drop( m.size() )
    }

    注意调用的时候需要给目标哈希表赋值才能真正清空。

    m = emptyHMap(m )

==============

java作为一门强大的系统编程语言，已经在世界各地广泛地应用．groovy是增强java平台的唯一脚本语言，它的语法更

加简洁，能快速开发．
List:
定义list：def list = []
list = [1,2,3,4,5]

list操作：
def list = [1,2,3,4,5]
list[1]        //Result: 2
list[-2]       //Result: 4
list[1..3]     //Result: [2, 3, 4]
list[1..<3]    //Result: [2, 3]
list + [6,7]   //Result: [1, 2, 3, 4, 5, 6, 7]
list - [4,5,6] //Result: [1, 2, 3]
list << 6      //Result: [1, 2, 3, 4, 5, 6]
list << [6,7]  //Result: [1, 2, 3, 4, 5, 6, [6, 7]]

list方法：
[2,5].add(7)               //Result: true; list = [2, 5, 7]
[2,5].add(1,9)             //list = [2, 7, 5]
[2,5].add([7,9])           //Result: [2, 5, [7, 9]]
[2, 5, [7, 9]].flatten()   //Result: [2, 5, 7, 9]；克隆并解开下层list
[2,5].get(1)               //Result: 5
[2,5].size()               //Result: 2
[2,5].isEmpty()            //Result: false
[2,5].getAt(1)             //Result: 5
[2,5,7].getAt(1..2)        //Result: [5, 7]
[2,5,7].getAt(-1)          //Result: 7；get()不支持负数参数，getAt()支持
[2,5,7].getAt([1,2])       //Result: [5, 7]
[2,5,7].intersect([5,9,2]) //Result: [5, 2]；交集
[2,5,7].pop()              //Result: 7
[2,5,7].plus([3,6])        //Result: [2, 5, 7, 3, 6]
[2,5,7,2].minus(2)         //Result: [5, 7]
[2,5,7].remove(1)          //Result: 5; list = [2, 7]
[2,7,5].reverse()          //Result: [5, 7, 2]
[2,7,5].sort()             //Result: [2, 5, 7]

Map:
定义Map：def map = [:]
map = ['name':'Bruce', 'age':27]

键被解释成字符串：
def x = 3
def y = 5
def map = [x:y, y:x] //Result: ["x":5, "y":3]

如果要把值作为键，像下面这样：
def city = 'shanghai'
map."${city}" = 'china'
map.shanghai //Result: "china"

map操作：
def map = [3:56, 'name':'Bruce']
def a = 'name'
map.name    //Result: "Bruce"
map['name'] //Result: "Bruce"
map[a]      //Result: "Bruce"
map[3]      //Result: 56
以下访问是错误的，会抛出异常
map[name]
map.3

map方法：
def map = ['name':'Bruce', 'age':27]
map.containsKey('name')   //Result: true
map.get('name')           //Result: "Bruce"
map.get('weight', '60kg') //Result: "60kg"；会把key：value加进去
map.getAt('age')          //Result: 27
map.keySet()              //Result: [name, age, weight]
map.put('height', '175')  //Result: ["name":"Bruce", "age":27, "weight":"60kg", "height":"175"]
map.values().asList()     //Result: ["Bruce", 27, "60kg", "175"]
map.size()                //Result: 4

下列方法可以应用于范围、List和Map(inject和reverseEach方法只适合List和范围)
each             void each(Closure clos)迭代集合中每个元素。
find             List find(Closure clos)返回集合中第一个符合条件的元素。
findAll          List findAll(Closure clos)返回集合中所有符合条件的元素。
collect          List collect(Closure clos)返回计算后的列表。
collect          List collect(Collection col, Closure clos)返回计算后的列表，同时把返回值保存到col集合里。
any              boolean any(Closure clos)集合中有一个符合条件即返回true，否则返回false。
every            boolean every(Closure clos)集合中所有都符合条件即返回true，否则返回false。
findIndexOf      int findIndexOf(Closure clos)返回第一个符合条件元素在集合中的索引值(从0开始计算)。
findLastIndexOf  int findLastIndexOf(Closure clos)返回最后一个符合条件元素在集合中的索引值(从0开始计算)。
inject           Object inject(Object value, Closure clos)返回调用列表和参数的计算值。
[1,2,3,4].inject(5) {x,y->
    x + y
}
//Result: 15
reverseEach      void reverseEach(Closure clos)反响迭代集合中每个元素。
[1,2,3,4].reverseEach {x->
    print x + '-'
}
//4-3-2-1-
sort             List sort(Closure clos)按照闭包的返回条件排序。 