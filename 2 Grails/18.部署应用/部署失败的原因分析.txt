. 将打包的war deploy到tomcat 7.0.55 后， 发现运行失败， 检查并停止了其他所有的grails 应用， 重新启动tomcat 7.0.5，  检查应用， 发现正常运行

. 没有重新启动tomcat 7.0.55 启动重新载入的应用， 会出现下面的错误 (catalina.2015-11.30.log)

严重: Error listenerStart
十一月 30, 2015 7:57:45 上午 org.apache.catalina.core.StandardContext startInternal
严重: Context [/SMMS] startup failed due to previous errors
十一月 30, 2015 7:57:47 上午 org.apache.tomcat.util.modeler.BaseModelMBean invoke
严重: Exception invoking method check
java.lang.OutOfMemoryError: PermGen space


   stacktrace.log 有以下错误:

2015-11-30 07:57:40,265 [http-apr-8080-exec-6] ERROR StackTrace  - Full Stack Trace:
java.lang.OutOfMemoryError: PermGen space
	at java.lang.ClassLoader.defineClass1(Native Method)
	at java.lang.ClassLoader.defineClass(ClassLoader.java:800)
	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)
	at org.apache.catalina.loader.WebappClassLoader.findClassInternal(WebappClassLoader.java:2957)
	at org.apache.catalina.loader.WebappClassLoader.findClass(WebappClassLoader.java:1210)
	at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1690)
	at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1571)
	at java.lang.Class.getDeclaredConstructors0(Native Method)
	at java.lang.Class.privateGetDeclaredConstructors(Class.java:2493)
	at java.lang.Class.getDeclaredConstructors(Class.java:1901)
	at org.codehaus.groovy.reflection.CachedClass$2$1.run(CachedClass.java:69)
	at java.security.AccessController.doPrivileged(Native Method)
	at org.codehaus.groovy.reflection.CachedClass$2.initValue(CachedClass.java:66)
	at org.codehaus.groovy.reflection.CachedClass$2.initValue(CachedClass.java:64)
	at org.codehaus.groovy.util.LazyReference.getLocked(LazyReference.java:46)
	at org.codehaus.groovy.util.LazyReference.get(LazyReference.java:33)
	at org.codehaus.groovy.reflection.CachedClass.getConstructors(CachedClass.java:258)
	at groovy.lang.MetaClassImpl.<init>(MetaClassImpl.java:189)
	at groovy.lang.ExpandoMetaClass.<init>(ExpandoMetaClass.java:301)
	at groovy.lang.ExpandoMetaClass.<init>(ExpandoMetaClass.java:297)
	at groovy.lang.ExpandoMetaClass.<init>(ExpandoMetaClass.java:344)
	at groovy.lang.ExpandoMetaClassCreationHandle.createNormalMetaClass(ExpandoMetaClassCreationHandle.java:46)
	at groovy.lang.MetaClassRegistry$MetaClassCreationHandle.createWithCustomLookup(MetaClassRegistry.java:148)
	at groovy.lang.MetaClassRegistry$MetaClassCreationHandle.create(MetaClassRegistry.java:131)
	at org.codehaus.groovy.reflection.ClassInfo.getMetaClassUnderLock(ClassInfo.java:209)
	at org.codehaus.groovy.reflection.ClassInfo.getMetaClass(ClassInfo.java:241)
	at org.codehaus.groovy.runtime.callsite.ClassMetaClassGetPropertySite.<init>(ClassMetaClassGetPropertySite.java:35)
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.createClassMetaClassGetPropertySite(AbstractCallSite.java:296)
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.createGetPropertySite(AbstractCallSite.java:248)
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.acceptGetProperty(AbstractCallSite.java:235)
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callGetProperty(AbstractCallSite.java:227)
	at org.codehaus.groovy.grails.web.util.StreamCharBufferMetaUtils.registerStreamCharBufferMetaClass(StreamCharBufferMetaUtils.groovy:5)
2015-11-30 07:57:40,265 [http-apr-8080-exec-6] ERROR StackTrace  - Full Stack Trace:
java.lang.OutOfMemoryError: PermGen space
	at java.lang.ClassLoader.defineClass(ClassLoader.java:800)
	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)
	at java.lang.Class.privateGetDeclaredConstructors(Class.java:2493)
	at java.lang.Class.getDeclaredConstructors(Class.java:1901)
	at org.codehaus.groovy.util.LazyReference.getLocked(LazyReference.java:46)
	at org.codehaus.groovy.util.LazyReference.get(LazyReference.java:33)


  但是启动tomcat 7.0.55 的时候， 会发现很多java 运行错误的提示， 不知道咋回事， 需要持续跟踪关注，分析原因。

. 启动tomcat 7.0.55 时， 出现下面的错误: ( catalina.2015-11-30.log )

十一月 30, 2015 7:48:51 上午 org.apache.catalina.session.StandardManager doLoad
严重: IOException while loading persisted sessions: java.io.EOFException
java.io.EOFException
	at java.io.ObjectInputStream$PeekInputStream.readFully(ObjectInputStream.java:2325)
	at java.io.ObjectInputStream$BlockDataInputStream.readShort(ObjectInputStream.java:2794)
	at java.io.ObjectInputStream.readStreamHeader(ObjectInputStream.java:801)
	at java.io.ObjectInputStream.<init>(ObjectInputStream.java:299)
	at org.apache.catalina.util.CustomObjectInputStream.<init>(CustomObjectInputStream.java:56)
	at org.apache.catalina.session.StandardManager.doLoad(StandardManager.java:244)
	at org.apache.catalina.session.StandardManager.load(StandardManager.java:202)
	at org.apache.catalina.session.StandardManager.startInternal(StandardManager.java:489)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5499)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150)
	at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:901)
	at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:877)
	at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:649)
	at org.apache.catalina.startup.HostConfig.deployDirectory(HostConfig.java:1247)
	at org.apache.catalina.startup.HostConfig$DeployDirectory.run(HostConfig.java:1898)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)
	at java.util.concurrent.FutureTask.run(FutureTask.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
	at java.lang.Thread.run(Thread.java:744)

十一月 30, 2015 7:48:51 上午 org.apache.catalina.session.StandardManager startInternal
严重: Exception loading sessions from persistent storage
java.io.EOFException
	at java.io.ObjectInputStream$PeekInputStream.readFully(ObjectInputStream.java:2325)
	at java.io.ObjectInputStream$BlockDataInputStream.readShort(ObjectInputStream.java:2794)
	at java.io.ObjectInputStream.readStreamHeader(ObjectInputStream.java:801)
	at java.io.ObjectInputStream.<init>(ObjectInputStream.java:299)
	at org.apache.catalina.util.CustomObjectInputStream.<init>(CustomObjectInputStream.java:56)
	at org.apache.catalina.session.StandardManager.doLoad(StandardManager.java:244)
	at org.apache.catalina.session.StandardManager.load(StandardManager.java:202)
	at org.apache.catalina.session.StandardManager.startInternal(StandardManager.java:489)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5499)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150)
	at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:901)
	at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:877)
	at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:649)
	at org.apache.catalina.startup.HostConfig.deployDirectory(HostConfig.java:1247)
	at org.apache.catalina.startup.HostConfig$DeployDirectory.run(HostConfig.java:1898)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)
	at java.util.concurrent.FutureTask.run(FutureTask.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
	at java.lang.Thread.run(Thread.java:744)

. 运行应用的时候， 出现下面的错误

2015-11-30 08:04:41,468 [http-apr-8080-exec-6] ERROR errors.GrailsExceptionResolver  - ClassNotFoundException occurred when processing request: [POST] /SMMS/homepage/reportListProc
smms.reportlist.ReportList_2015_tbl. Stacktrace follows:
java.lang.ClassNotFoundException: smms.reportlist.ReportList_2015_tbl
	at www.aqugen.com.ReportListProcService.$tt__procReportList2(ReportListProcService.groovy:192)
	at www.aqugen.com.ReportListProcService.$tt__getSpecDateAllReportList(ReportListProcService.groovy:120)
	at www.aqugen.com.ReportListProcService.$tt__getPeriodReportList(ReportListProcService.groovy:78)
	at smms.HomepageController.reportListProc(HomepageController.groovy:166)
	at grails.plugin.cache.web.filter.PageFragmentCachingFilter.doFilter(PageFragmentCachingFilter.java:198)
	at grails.plugin.cache.web.filter.AbstractFilter.doFilter(AbstractFilter.java:63)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
	at java.lang.Thread.run(Thread.java:744)


  进行公告列表的处理。


=================

e:/../grails war smms.war

2015-11-30 08:51:59,750 [main] INFO  webxml.WebxmlGrailsPlugin  - Loading defaul
t config file: class DefaultWebXmlConfig
2015-11-30 08:51:59,781 [main] WARN  webxml.WebxmlGrailsPlugin  - Did not find a
pplication config file: WebXmlConfig
2015-11-30 08:52:00,859 [main] INFO  webxml.WebxmlGrailsPlugin  - Loading defaul
t config file: class DefaultWebXmlConfig
2015-11-30 08:52:00,875 [main] WARN  webxml.WebxmlGrailsPlugin  - Did not find a
pplication config file: WebXmlConfig
| Done creating WAR smms.war

上面这个命令行， 缺省将生成的smms.war 存放在当前目录中。

仔细查看错误， 发现下面的:

  smms.reportlist.ReportList_2015_tbl

  但是查看Tomcat 7.0.5 下面的smms 中的类 对应的路径是

  smms/ReportList/ReportList_2015_tbl.class

  也就是说， 域名自动把中间的部分按照规约改为大写开头了。。。。。， 所以在设计实现Grails 应用的时候， 应该注意，只要是域类， 就按照大写首字母来进行， 但是 在定义的域类的时候， 如果有了中间级别的目录，自动会变成小写。。。

  原因可能是， 创建域类的时候， 使用的包是smms.ReportList, 但是系统自动显示为smms.reportlist, 并且在其他类里引用也必须是:

  import smms.reportlist.xxxx

  但是， 实际对应的路径是 smms/ReportList/...., 那么部署以后， 根据包名就找不到了， 因为大小写不一样了。

  所以定义域类的包的时候， 务必都是用小写的。

  重新定义了一个smms.test.Adams_2015_tbl  ,  域类之前的全部用小写， 果然部署后没有问题。。。

  部署后的类存放地址为: tomcat 7.0.55\webapps\SMMS\WEB-INF\classes\smms\   这个目录就是应用开发的所有域类所在。 会发现 ReportList 子目录和test 子目录。  

  需要注意的是， GSP 文件中的跳转 controller  必须也要大小写一致。 

. 另外需要注意的是:

  工程名字最好也使用小写的， 因为部署到Tomcat 后， 都会变成小写的， 这样跳转到应用的home 的时候，会出现跳转失败， 特别是使用sitemech 的时候， 由于已经实现定制好了home.  

  应该是创建 war 的时候， 也必须要注意大小写，并且要注意看目标目录中是否有同名的大小写不同的war文件， 如果有， 需要先删除， 才能够创建出目标大小写的文件。

  grails war SMMS.war   --> 创建出来的是SMMS.war, 但是如果目标目录有smms.war, 那么就会覆盖smms.war. 就会造成部署到Tomcat 后是smms


.   Failed to initialize end point associated with ProtocolHandler ["http-apr-8080"]

  出现这种原因主要是8080端口被占用了。

解决1：

打开任务管理器看看里面有没有javaw的线程，把它关了再重新启动tomcat看看。

解决2：

修改tomcat /conf /server.xml 文件

<Connector port="8888" protocol="HTTP/1.1"
               connectionTimeout="20000"
               redirectPort="8443" />

配置文件修改了一下，正解！